CREATE DATABASE coffee_shop_sales_db;

use coffee_shop_sales_db;

CREATE TABLE coffee_shop_sales (
transaction_id	INT PRIMARY KEY,
transaction_date DATE NOT NULL,
transaction_time TIME NOT NULL,
transaction_qty	INT NOT NULL,
store_id INT NOT NULL,
store_location VARCHAR(50) NOT NULL,
product_id INT NOT NULL,
unit_price DECIMAL(10,2) NOT NULL,
product_category VARCHAR(100) NOT NULL,
product_type VARCHAR(100) NOT NULL,
product_detail VARCHAR(100) NOT NULL
);

SHOW TABLES; # SHOWS ALL THE TABELS IN A DATABASE.

SELECT * FROM coffee_shop_sales;

/* 1. Count of transactions provided. */
SELECT COUNT(DISTINCT transaction_id) count_transactions FROM coffee_shop_sales;

/* 2. Store id and their corresponding locations. */
SELECT DISTINCT store_id, store_location FROM coffee_shop_sales;

/* 3. Category of products available in each store. */
SELECT DISTINCT store_id, product_category FROM coffee_shop_sales
ORDER BY store_id;

/* 4. Product category and their corresponding types. */
SELECT DISTINCT Product_category, product_type FROM coffee_shop_sales
ORDER BY Product_category;

/* 5.  count of product categroies and product type in each store. */
SELECT COUNT(DISTINCT Product_category) count_product_category, COUNT(DISTINCT product_type) count_product_type FROM coffee_shop_sales;

/* 6. Identify the daily total revenue and number of transactions.*/
SELECT transaction_date, COUNT(transaction_id) transactions, SUM(transaction_qty*unit_price) daily_revenue FROM coffee_shop_sales
GROUP BY transaction_date;

/* 7. Find the hour with the highest sales across all transactions.*/
SELECT EXTRACT(HOUR FROM transaction_time) transaction_hour, SUM(transaction_qty*unit_price) Hourly_revenue FROM coffee_shop_sales
GROUP BY EXTRACT(HOUR FROM transaction_time)
ORDER BY Hourly_revenue DESC;

/* 8. List the top 5 best-selling products by revenue. */
SELECT product_id, product_type, SUM(transaction_qty*unit_price) total_revenue FROM coffee_shop_sales
GROUP BY product_id, product_type
ORDER BY total_revenue DESC
LIMIT 5;

/* 9. List the top 5 best-selling products by quantity. */
SELECT product_id, product_type, SUM(transaction_qty) total_qty FROM coffee_shop_sales
GROUP BY product_id, product_type
ORDER BY total_qty DESC
LIMIT 5;

/* 10. Calculate the total revenue generated by each product category. */
SELECT product_category, SUM(transaction_qty*unit_price) total_revenue FROM coffee_shop_sales
GROUP BY product_category
ORDER BY total_revenue DESC;

/* 11. Compare the total revenue and number of transactions for each store.*/
SELECT store_id, SUM(transaction_qty*unit_price) total_revenue, SUM(transaction_qty) total_qty FROM coffee_shop_sales
GROUP BY store_id;

/* 12. Calculate total sales for each respective month. */
SELECT EXTRACT(MONTH FROM transaction_date) month_name, SUM(transaction_qty*unit_price) total_sales FROM coffee_shop_sales
GROUP BY EXTRACT(MONTH FROM transaction_date);

/* 13. Determine month on month decrease or increase in sales. */
SELECT MONTH(transaction_date) month_no, SUM(transaction_qty*unit_price) total_sales, ROUND((SUM(transaction_qty*unit_price)-LAG(SUM(transaction_qty*unit_price)) OVER(ORDER BY MONTH(transaction_date) ASC))/LAG(SUM(transaction_qty*unit_price)) OVER(ORDER BY MONTH(transaction_date) ASC) * 100,2) MOM_Percentage
FROM coffee_shop_sales
# WHERE MONTH(transaction_date) IN (4,5)
GROUP BY MONTH(transaction_date);

/* 14. Determine month on month decrease or increase in total quantity.*/
SELECT MONTH(transaction_date) month_no, SUM(transaction_qty) total_qty, ROUND((SUM(transaction_qty)-LAG(SUM(transaction_qty)) OVER(ORDER BY MONTH(transaction_date) ASC))/LAG(SUM(transaction_qty)) OVER(ORDER BY MONTH(transaction_date) ASC) * 100,2) MOM_Percentage
FROM coffee_shop_sales
# WHERE MONTH(transaction_date) IN (4,5)
GROUP BY MONTH(transaction_date);

/* 15. Daily sales for a selected month.*/
SELECT DAY(transaction_date) day_no, SUM(transaction_qty*unit_price) total_sales FROM coffee_shop_sales
WHERE  MONTH(transaction_date) =5
GROUP BY DAY(transaction_date);

/* 16. Comparing daily sales with average sales. If greater than print "Above Average" less than "Below Average". */
SELECT day_no,totalsales, avgsales,
CASE WHEN totalsales>avgsales THEN "Above Average"
     WHEN totalsales<avgsales THEN "Below Average"
END sales_status
FROM 
(SELECT DAY(transaction_date) day_no,SUM(transaction_qty*unit_price) totalsales, AVG(SUM(transaction_qty*unit_price)) OVER() avgsales
  FROM coffee_shop_sales
  WHERE  MONTH(transaction_date) =5
  GROUP BY DAY(transaction_date)) sales_data;
  
/* 17. Total sales on weekdays and weekends.*/
SELECT CASE WHEN DAYOFWEEK(transaction_date) IN (1,7) THEN "Weekend" ELSE "Weekday" END  day_type, SUM(transaction_qty*unit_price) sales
FROM coffee_shop_sales
GROUP BY day_type;

/* 18. Sales from each store location on a particular month. */
SELECT store_location, SUM(transaction_qty*unit_price) totalsales FROM coffee_shop_sales
WHERE  MONTH(transaction_date) =5
GROUP BY store_location;

/* 19. To view sales in a week in a particular month.*/
SELECT 
    CASE 
        WHEN DAYOFWEEK(transaction_date) = 2 THEN 'Monday'
        WHEN DAYOFWEEK(transaction_date) = 3 THEN 'Tuesday'
        WHEN DAYOFWEEK(transaction_date) = 4 THEN 'Wednesday'
        WHEN DAYOFWEEK(transaction_date) = 5 THEN 'Thursday'
        WHEN DAYOFWEEK(transaction_date) = 6 THEN 'Friday'
        WHEN DAYOFWEEK(transaction_date) = 7 THEN 'Saturday'
        ELSE 'Sunday'
    END AS Day_of_Week,
    ROUND(SUM(unit_price * transaction_qty)) AS Total_Sales
FROM 
    coffee_shop_sales
WHERE 
    MONTH(transaction_date) = 5 
GROUP BY Day_of_Week;

/* 20. calculates total sales by product and then selects only those products where sales exceed the average sales*/
WITH Product_sales AS(
SELECT 
    product_id, product_type, SUM(unit_price * transaction_qty) AS Total_Sales 
FROM
    coffee_shop_sales
GROUP BY
   product_id, product_type  
)
SELECT 
  product_id, product_type, Total_Sales
FROM
  Product_sales
WHERE
   Total_Sales>(SELECT AVG(Total_Sales) AS Avg_Sales FROM Product_sales);

